// Test script to check and create sample tasks in database
const { neon } = require('@neondatabase/serverless');

async function testDatabaseTasks() {
  try {
    // Load environment variables
    require('dotenv').config();
    
    const sql = neon(process.env.DATABASE_URL);
    
    console.log('üîç Checking existing tasks...');
    
    // Check existing tasks
    const existingTasks = await sql`SELECT * FROM tasks ORDER BY created_at DESC`;
    console.log(`Found ${existingTasks.length} existing tasks:`, existingTasks);
    
    // Check existing projects
    const existingProjects = await sql`SELECT * FROM projects ORDER BY created_at DESC`;
    console.log(`Found ${existingProjects.length} existing projects:`, existingProjects);
    
    // Create a sample project if none exists
    let projectId = null;
    if (existingProjects.length === 0) {
      console.log('üìù Creating sample project...');
      const [newProject] = await sql`
        INSERT INTO projects (name, domain, description, status)
        VALUES ('Project Manager Demo', 'demo.project-manager.local', 'Demo project for testing', 'active')
        RETURNING *
      `;
      projectId = newProject.id;
      console.log('‚úÖ Sample project created:', newProject);
    } else {
      projectId = existingProjects[0].id;
      console.log('üìã Using existing project:', existingProjects[0].name);
    }
    
    // Create sample tasks if none exist
    if (existingTasks.length === 0) {
      console.log('üìù Creating sample tasks...');
      
      const today = new Date().toISOString().split('T')[0];
      const sampleTasksData = [
        {
          title: 'Ho√†n th√†nh thi·∫øt k·∫ø giao di·ªán ch√≠nh',
          description: 'Thi·∫øt k·∫ø layout v√† UI components cho trang dashboard',
          priority: 'high',
          date: today,
          estimated_time: 180
        },
        {
          title: 'Review code v√† t·ªëi ∆∞u hi·ªáu su·∫•t',
          description: 'Ki·ªÉm tra v√† c·∫£i thi·ªán performance c·ªßa ·ª©ng d·ª•ng',
          priority: 'medium',
          date: today,
          estimated_time: 120
        },
        {
          title: 'C·∫≠p nh·∫≠t documentation',
          description: 'Vi·∫øt t√†i li·ªáu h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng cho ng∆∞·ªùi d√πng',
          priority: 'low',
          date: today,
          estimated_time: 60
        }
      ];
      
      for (const taskData of sampleTasksData) {
        const [newTask] = await sql`
          INSERT INTO tasks (project_id, title, description, priority, date, estimated_time)
          VALUES (${projectId}, ${taskData.title}, ${taskData.description}, ${taskData.priority}, ${taskData.date}, ${taskData.estimated_time})
          RETURNING *
        `;
        console.log('‚úÖ Task created:', newTask.title);
      }
      
      console.log('üéâ Sample tasks created successfully!');
    } else {
      console.log('üìã Tasks already exist in database');
    }
    
    // Final check
    const finalTasks = await sql`SELECT * FROM tasks ORDER BY created_at DESC`;
    console.log(`\nüìä Final summary: ${finalTasks.length} total tasks in database`);
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  }
}

testDatabaseTasks();
